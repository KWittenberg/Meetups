@page "/admin/event/{id:guid?}"

@attribute [Authorize(Policy = "OrganizerOnly")]

@inject IEventRepository Repository
@inject NavigationManager Navigation

<PageHeader2 Title="@Title" BackLink="events" />

<div class="mt-100 @App?.GetContentClass()">
    <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mt-5 row">
            <div class="col-md-6 col-12">
                @if (string.IsNullOrWhiteSpace(Input?.ImageUrl) && ImageData?.ImagePreviewBase64 is null)
                {
                    <div class="upload-area">
                        <label class="upload-label">
                            <i class="bi bi-cloud-upload fs-1"></i><span>Click to upload file.</span>
                            <InputFile OnChange="@HandleImage" style="display: none;" accept="image/*" />
                        </label>
                    </div>
                }
                else
                {
                    <div class="position-relative">
                        @if (ImageData is not null)
                        {
                            <img src="@(ImageData?.ImagePreviewBase64)" alt="Image Preview" class="img-fluid" />
                            <a class="text-danger position-absolute top-0 end-0 icon-delete" @onclick="DeleteImagePreview" title="Remove Image">
                                <i class="fs-5 bi bi-x-circle"></i>
                            </a>
                            <div class="image-info">
                                Name: <span>@ImageData?.Name</span><br />
                                Dimension: <span>@ImageData?.Width</span> x <span>@ImageData?.Height</span><br />
                                Size: <span>@ImageData?.FormattedSize</span><br />
                                Type: <span>@ImageData?.ContentType</span><br />
                                Last Modified: <span>@ImageData?.LastModified</span>
                            </div>
                        }
                        else
                        {
                            <img src="@(Input?.ImageUrl)" alt="ImageUrl" class="img-fluid" />
                            <a class="text-danger position-absolute top-0 end-0 icon-delete" @onclick="() => ShowDeleteImage(Id.Value)" title="Remove Image">
                                <i class="fs-5 bi bi-x-circle"></i>
                            </a>
                        }
                    </div>
                }

                <div class="mt-3 form-group">
                    <label>Category</label>
                    <InputSelect class="form-select" @bind-Value="@Input.Category">
                        <option value="">Select Category</option>
                        @foreach (var item in Categories)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Input.Category" />
                </div>

                @if (Input.Category == MeetupCategories.InPerson.ToString())
                {
                    Input.MeetupLink = string.Empty;
                    <div class="form-group">
                        <label>Location</label>
                        <InputText class="form-control" @bind-Value="@Input.Location" />
                        <ValidationMessage For="() => Input.Location" />
                    </div>
                }
                else if (Input.Category == MeetupCategories.Online.ToString())
                {
                    Input.Location = string.Empty;
                    <div class="form-group">
                        <label>MeetupLink</label>
                        <InputText class="form-control" @bind-Value="@Input.MeetupLink" />
                        <ValidationMessage For="() => Input.MeetupLink" />
                    </div>
                }
            </div>

            <div class="col-md-6 col-12">
                <div class="form-group">
                    <label>Title</label>
                    <InputText class="form-control" @bind-Value="@Input.Title" />
                    <ValidationMessage For="() => Input.Title" />
                </div>
                <div class="form-group">
                    <label>Details</label>
                    <InputText class="form-control" @bind-Value="@Input.Details" />
                    <ValidationMessage For="() => Input.Details" />
                </div>
                <div class="form-group">
                    <label>Capacity</label>
                    <InputNumber class="form-control" @bind-Value="@Input.Capacity" />
                    <ValidationMessage For="() => Input.Capacity" />
                </div>

                <div class="row">
                    <div class="col-6 form-group">
                        <label>Start</label>
                        <input type="datetime-local" class="form-control" @bind-value="@Input.Start" />
                        <ValidationMessage For="() => Input.Start" />
                    </div>
                    <div class="col-6 form-group">
                        <label>End</label>
                        <input type="datetime-local" class="form-control" @bind-value="@Input.End" />
                        <ValidationMessage For="() => Input.End" />
                    </div>
                </div>

                <div class="mt-4 p-0 text-end">
                    <a href="/admin/events" class="btn btn-outline-light">Back</a>
                    <button type="submit" class="btn btn-primary w-50">SAVE</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>


@code {
    [CascadingParameter] AppState? App { get; set; }

    [Parameter] public Guid? Id { get; set; }

    List<string> Categories { get; set; } = new();

    EventInput? Input { get; set; } = new();

    ImageData? ImageData { get; set; } = new();

    string Title => Id is not null ? "Update Event" : "Add Event";



    protected override void OnInitialized()
    {
        Categories = Repository.GetAllCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            Input = new EventInput();
            Input.OrganizerId = App!.CurrentUser.Id;
        }
        else await LoadData();
    }

    async Task LoadData()
    {
        var result = await Repository.GetByIdAsync(Id!.Value);
        if (!result.Success || result.Data is null) return;
        if (result.Data.OrganizerId != App!.CurrentUser.Id)
        {
            Navigation.NavigateTo("/Account/AccessDenied");
            return;
        }
        Input = result.Data.ToInput();
        ImageData = null;
        StateHasChanged();
    }

    #region Handle IMAGE
    async Task HandleImage(InputFileChangeEventArgs e)
    {
        var result = await Repository.GenerateImagePreviewAsync(e.File);
        if (!result.Success) return;

        ImageData = result.Data;
        StateHasChanged();
    }

    void DeleteImagePreview()
    {
        ImageData = null;
        StateHasChanged();
    }

    void ShowDeleteImage(Guid id)
    {
        App?.ShowDeleteConfirmation("Cover Image", id.ToString(), EventCallback.Factory.Create(this, () => ConfirmDeleteImage(id)));
    }

    async Task ConfirmDeleteImage(Guid id)
    {
        var result = await Repository.DeleteImageAsync(id);
        if (result.Success) await LoadData();
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    }
    #endregion



    async Task HandleValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(Input);
        ArgumentNullException.ThrowIfNull(ImageData);

        var result = Id is null
            ? await Repository.AddAsync(ImageData, Input)
            : await Repository.UpdateAsync(Id.Value, Input, ImageData);

        if (result.Success) Navigation.NavigateTo("/admin/events");
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
        StateHasChanged();
    }
}