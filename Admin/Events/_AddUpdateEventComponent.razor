<EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    @if (Input.ImageUrl is null)
    {
        <div class="form-group">
            <label>CoverImage</label>
            <InputFile class="form-control" OnChange="HandleImageChange" accept=".jpg" />
            @* <ValidationMessage For="() => Input.CoverImage" /> *@
        </div>
    }
    else
    {
        <img src="@Input.ImageUrl" alt="Cover Image" class="img-thumbnail" />
    }

    <div class="mt-5 row">
        <div class="col-md-6 col-12">
            <div class="form-group">
                <label>Title</label>
                <InputText class="form-control" @bind-Value="@Input.Title" />
                <ValidationMessage For="() => Input.Title" />
            </div>
            <div class="form-group">
                <label>Details</label>
                <InputText class="form-control" @bind-Value="@Input.Details" />
                <ValidationMessage For="() => Input.Details" />
            </div>
            <div class="form-group">
                <label>Capacity</label>
                <InputNumber class="form-control" @bind-Value="@Input.Capacity" />
                <ValidationMessage For="() => Input.Capacity" />
            </div>


            <div class="form-group">
                <label>Category</label>
                <InputSelect class="form-select" @bind-Value="@Input.Category">
                    <option value="">Select Category</option>
                    @foreach (var item in Categories)
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Input.Category" />
            </div>

            @if (Input.Category == MeetupCategories.InPerson.ToString())
            {
                <div class="form-group">
                    <label>Location</label>
                    <InputText class="form-control" @bind-Value="@Input.Location" />
                    <ValidationMessage For="() => Input.Location" />
                </div>
            }
            else if (Input.Category == MeetupCategories.Online.ToString())
            {
                <div class="form-group">
                    <label>MeetupLink</label>
                    <InputText class="form-control" @bind-Value="@Input.MeetupLink" />
                    <ValidationMessage For="() => Input.MeetupLink" />
                </div>
            }
        </div>

        <div class="col-md-6 col-12">
            <div class="form-group">
                <label>StartDate</label>
                <InputDate class="form-control" @bind-Value="@Input.Start" />
                <ValidationMessage For="() => Input.Start" />
            </div>
            <div class="form-group">
                <label>EndDate</label>
                <InputDate class="form-control" @bind-Value="@Input.End" />
                <ValidationMessage For="() => Input.End" />
            </div>
            
            <div class="mt-4 p-0 text-end">
                <a href="/" class="btn btn-outline-light">Back</a>
                <button type="submit" class="btn btn-primary w-50">SAVE</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public EventInput? Input { get; set; } = new ();
    
    [Parameter] public List<string>? Categories { get; set; } = new();

    [Parameter] public EventCallback<EventInput> OnHandleImageChange { get; set; } = default!;
    
    [Parameter] public EventCallback<EventInput> OnValidSubmit { get; set; } = default!;


    async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(Input);
    }

    async Task HandleImageChange()
    {
        await OnValidSubmit.InvokeAsync(Input);
    }
}
