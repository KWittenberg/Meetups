@page "/event/{id:Guid?}"

@inject IEventRepository Repository
@inject NavigationManager Navigation



<div class="mt-5 @App?.GetContentClass()">
    <h3>Create Event</h3>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">@ErrorMessage</div>
    }

    <EditForm Model="Input" OnValidSubmit="CreateEvent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="@Input.Title" />
            <ValidationMessage For="() => Input.Title" />
        </div>
        <div class="form-group">
            <label>Description</label>
            <InputText class="form-control" @bind-Value="@Input.Description" />
            <ValidationMessage For="() => Input.Description" />
        </div>
        <div class="form-group">
            <label>Location</label>
            <InputText class="form-control" @bind-Value="@Input.Location" />
            <ValidationMessage For="() => Input.Location" />
        </div>

        <div class="form-group">
            <label>StartDate</label>
            <InputDate class="form-control" @bind-Value="@Input.StartDate" />
            <ValidationMessage For="() => Input.StartDate" />
        </div>
        <div class="form-group">
            <label>StartTime</label>
            <input type="time" class="form-control" @bind-value="@Input.StartTime" />
            <ValidationMessage For="() => Input.StartTime" />
        </div>
        <div class="form-group">
            <label>EndDate</label>
            <InputDate class="form-control" @bind-Value="@Input.EndDate" />
            <ValidationMessage For="() => Input.EndDate" />
        </div>
        <div class="form-group">
            <label>EndTime</label>
            <input type="time" class="form-control" @bind-value="@Input.EndTime" />
            <ValidationMessage For="() => Input.EndTime" />
        </div>

        <div class="mt-4 p-0 text-end">
            <a href="/" class="btn btn-outline-light">Back</a>
            <button type="submit" class="btn btn-primary w-50">SAVE</button>
        </div>
    </EditForm>
</div>


@code {
    [CascadingParameter] AppState? App { get; set; }

    [Parameter] public Guid? Id { get; set; }

    EventInput Input { get; set; } = new();

    string ErrorMessage = string.Empty;





    async Task CreateEvent()
    {
        ErrorMessage = Repository.ValidateEvent(Input);
        if (!string.IsNullOrWhiteSpace(ErrorMessage)) return;

        var result = await Repository.AddAsync(Input);
        if (result.Success) Navigation.NavigateTo("/");
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    }


    async Task HandleValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(Input);

        var result = Id is null
            ? await Repository.AddAsync(Input)
            : await Repository.UpdateAsync((Guid)Id, Input);

        if (result.Success) Navigation.NavigateTo("/");
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    }
}