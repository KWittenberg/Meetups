@page "/event/{id:guid?}"

@inject IEventRepository Repository
@inject NavigationManager Navigation


<div class="mt-5 @App?.GetContentClass()">
    <h3>@Title</h3>

    @* <ErrorMessageComponent ErrorMessage="@ErrorMessage" /> *@

    <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@

        <div class="mt-5 row">
            <div class="col-md-6 col-12">
                @if (Input?.ImageUrl is null && ImageData?.ImagePreviewBase64 is null)
                {
                    <div class="upload-area">
                        <label class="upload-label">
                            <i class="bi bi-cloud-upload fs-1"></i><span>Click to upload file.</span>
                            <InputFile OnChange="@HandleImage" style="display: none;" accept="image/*" />
                        </label>
                    </div>
                }
                else
                {
                    <div class="position-relative">
                        <img src="@(ImageData?.ImagePreviewBase64 ?? Input?.ImageUrl)" alt="Cover Image" class="img-fluid" />
                        <a class="text-danger position-absolute top-0 end-0 icon-delete" @onclick="() => ShowDeleteImage(ImageData?.ImagePreviewBase64 ?? Input?.ImageUrl)" title="Remove Image">
                            <i class="fs-5 bi bi-x-circle"></i>
                        </a>

                        @if (ImageData is not null)
                        {
                            <div class="image-info">
                                Name: <span>@ImageData.Name</span><br />
                                Dimension: <span>@ImageData?.Width</span> x <span>@ImageData?.Height</span><br />
                                Size: <span>@ImageData?.FormattedSize</span><br />
                                Type: <span>@ImageData?.ContentType</span><br />
                                Last Modified: <span>@ImageData.LastModified</span>
                            </div>
                        }
                    </div>
                }

                <div class="mt-3 form-group">
                    <label>Category</label>
                    <InputSelect class="form-select" @bind-Value="@Input.Category">
                        <option value="">Select Category</option>
                        @foreach (var item in Categories)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Input.Category" />
                </div>

                @if (Input.Category == MeetupCategories.InPerson.ToString())
                {
                    <div class="form-group">
                        <label>Location</label>
                        <InputText class="form-control" @bind-Value="@Input.Location" />
                        <ValidationMessage For="() => Input.Location" />
                    </div>
                }
                else if (Input.Category == MeetupCategories.Online.ToString())
                {
                    <div class="form-group">
                        <label>MeetupLink</label>
                        <InputText class="form-control" @bind-Value="@Input.MeetupLink" />
                        <ValidationMessage For="() => Input.MeetupLink" />
                    </div>
                }
            </div>

            <div class="col-md-6 col-12">
                <div class="form-group">
                    <label>Title</label>
                    <InputText class="form-control" @bind-Value="@Input.Title" />
                    <ValidationMessage For="() => Input.Title" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputText class="form-control" @bind-Value="@Input.Description" />
                    <ValidationMessage For="() => Input.Description" />
                </div>
                <div class="form-group">
                    <label>Capacity</label>
                    <InputNumber class="form-control" @bind-Value="@Input.Capacity" />
                    <ValidationMessage For="() => Input.Capacity" />
                </div>

                <div class="row">
                    <div class="col-6 form-group">
                        <label>Start</label>
                        <input type="datetime-local" class="form-control" @bind-value="@Input.Start" />
                        <ValidationMessage For="() => Input.Start" />
                    </div>
                    <div class="col-6 form-group">
                        <label>End</label>
                        <input type="datetime-local" class="form-control" @bind-value="@Input.End" />
                        <ValidationMessage For="() => Input.End" />
                    </div>
                </div>

                <div class="mt-4 p-0 text-end">
                    <a href="/" class="btn btn-outline-light">Back</a>
                    <button type="submit" class="btn btn-primary w-50">SAVE</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>


@code {
    [CascadingParameter] AppState? App { get; set; }

    [Parameter] public Guid? Id { get; set; }

    List<string> Categories { get; set; } = new();

    EventInput? Input { get; set; } = new();

    ImageData? ImageData { get; set; } = new();

    // string ErrorMessage = string.Empty;

    string Title => Id is not null ? "Update Event" : "Add Event";




    protected override void OnInitialized()
    {
        Categories = Repository.GetAllCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null) Input = new EventInput();
        else
        {
            var result = await Repository.GetByIdAsync(Id.Value);
            if (!result.Success || result.Data is null) return;

            Input = result.Data.ToInput();
        }
    }

    #region Handle IMAGE
    async Task HandleImage(InputFileChangeEventArgs e)
    {
        var result = await Repository.GenerateImagePreviewAsync(e.File);
        if (!result.Success) return;

        ImageData = result.Data;
        StateHasChanged();
    }

    async Task HandleValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(Input);
        ArgumentNullException.ThrowIfNull(ImageData);

        var result = Id is null
            ? await Repository.AddAsync(ImageData, Input)
            : await Repository.UpdateAsync(Id.Value, Input);

        if (result.Success) Navigation.NavigateTo("/");
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    }
    
    
    
    
    async Task HandleImageOld(InputFileChangeEventArgs e)
    {
        try
        {
            Console.WriteLine("HandleImageChange: Started");
            if (e.File == null)
            {
                Console.WriteLine("HandleImageChange: No file selected");
                await App!.ShowToast("Please select a file!", "error");
                return;
            }

            Console.WriteLine($"HandleImageChange: File - Name: {e.File.Name}, Size: {e.File.Size}, ContentType: {e.File.ContentType}");
            var result = await Repository.GenerateImagePreviewAsync(e.File);
            Console.WriteLine($"HandleImageChange: GenerateImagePreviewAsync returned - Success: {result.Success}, Error: {result.Message}");

            if (!result.Success)
            {
                Console.WriteLine("HandleImageChange: Operation failed, returning");
                await App!.ShowToast(result.Message ?? "Unknown error", "error");
                return;
            }

            Console.WriteLine("HandleImageChange: Setting ImageData");
            ImageData = result.Data;
            Console.WriteLine($"HandleImageChange: ImageData set - Name: {ImageData?.Name}, FormattedSize: {ImageData?.FormattedSize}");
            Console.WriteLine("HandleImageChange: Calling StateHasChanged");
            StateHasChanged();
            Console.WriteLine("HandleImageChange: Completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HandleImageChange: Exception caught - Message: {ex.Message}, StackTrace: {ex.StackTrace}");
            await App!.ShowToast($"Error processing image: {ex.Message}", "error");
        }
    }

    



    // async Task HandleImageChange(InputFileChangeEventArgs e)
    // {
    //     try
    //     {
    //         IBrowserFile file = e.File;
    //         if (file is null)
    //         {
    //             // ErrorMessage = "Please select a file!";
    //             return;
    //         }

    //         if (file.Size > 500 * 1024)
    //         {
    //             // ErrorMessage = "File size exceeds 500KB!";
    //             return;
    //         }

    //         Input.CoverImage = file;

    //         var fileName = $"{Guid.NewGuid()}{Path.GetExtension(Input.CoverImage.Name)}";
    //         var filePath = Path.Combine("wwwroot", "img", "events", fileName);

    //         // Resize the image if needed
    //         await using var stream = Input.CoverImage.OpenReadStream();
    //         using var image = await SixLabors.ImageSharp.Image.LoadAsync(stream);
    //         image.Mutate(x => x.Resize(300, 169));

    //         await using var fileStream = new FileStream(filePath, FileMode.Create);

    //         //await image.SaveAsJpegAsync(fileStream);
    //         await image.SaveAsync(fileStream, new JpegEncoder());
    //         Input.ImageUrl = $"/img/events/{fileName}";

    //         // ErrorMessage = string.Empty;

    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         // ErrorMessage = $"Error processing image: {ex.Message}";
    //     }
    // }






    async Task HandleDeleteImage()
    {
        if (Input.ImageUrl is null) return;

        var filePath = Path.Combine("wwwroot", Input.ImageUrl.TrimStart('/'));
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
            Input.ImageUrl = null;
            StateHasChanged();
        }
    }

    void ShowDeleteImage(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl)) return;

        App?.ShowDeleteConfirmation("Cover Image", imageUrl, EventCallback.Factory.Create(this, () => HandleDeleteImage()));
    }
    #endregion








    // async Task CreateEvent()
    // {
    //     ErrorMessage = Repository.ValidateEvent(Input);
    //     if (!string.IsNullOrWhiteSpace(ErrorMessage)) return;

    //     var result = await Repository.AddAsync(Input);
    //     if (result.Success) Navigation.NavigateTo("/");
    //     await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    // }
}