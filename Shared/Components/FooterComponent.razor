@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppState App

@if (Event is not null)
{
    <footer>
        <div class="container-fluid bg-transparent20 text-white position-absolute bottom-0 w-100">
            <div class="container d-flex align-items-center">
                <div class="container">
                    <p><strong>@Event?.Title</strong></p>
                    <p><strong>Start:</strong> @Event?.Start.ToString("dddd - dd. MMMM. yyyy. u HH:mm'h'")</p>
                </div>
                <div class="container text-end">
                    <button class="btn btn-outline-light" @onclick="Attend">Attend</button>
                </div>
            </div>
        </div>
    </footer>

    <DialogXComponent Title="Sign up to attend this event" @ref="Dialog">
        <DialogBody>
            <ExternalLoginButtonsComponent />
        </DialogBody>
    </DialogXComponent>
}


@code {
    //[CascadingParameter] AppState? App { get; set; }

    [Parameter] public EventDto? Event { get; set; } = new();

    DialogXComponent? Dialog { get; set; } = new();

    AuthenticationState? AuthenticationState;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    async Task Attend()
    {
        if (AuthenticationState is not null && AuthenticationState?.User.Identity?.IsAuthenticated == false)
        {
            Dialog?.Show();
        }
        else
        {
            // await App!.ShowToast("You are already logged in.", "error");
            await App!.ShowConfirmation("You are already logged in.", "error");
        }
    }
}