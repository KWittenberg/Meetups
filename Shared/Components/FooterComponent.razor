@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRsvpRepository RsvpRepository
@inject AppState App
@inject NavigationManager Navigation

@if (Event is not null)
{
    <footer>
        <div class="container-fluid bg-transparent20 text-white position-absolute bottom-0 w-100">
            <div class="d-flex justify-content-between align-items-center">
                <div class="container">
                    <p><strong>@Event?.Title</strong></p>
                    <p><strong>Start:</strong> @Event?.Start.ToString("dddd - dd. MMMM. yyyy. u HH:mm'h'")</p>
                </div>
                <div style="color: red;">@ErrorMessage</div>
                <div class="ms-3 container text-end">
                    <button class="btn btn-outline-light" @onclick="Attend">Attend</button>
                </div>
            </div>
        </div>
    </footer>

    <DialogXComponent Title="Sign up to attend this event" @ref="Dialog">
        <DialogBody>
            <ExternalLoginButtonsComponent />
        </DialogBody>
    </DialogXComponent>

    <ConfirmDialogComponent @ref="ConfirmDialog" />
}


@code {
    //[CascadingParameter] AppState? App { get; set; }

    [Parameter] public EventDto? Event { get; set; } = new();

    DialogXComponent? Dialog { get; set; } = new();
    ConfirmDialogComponent? ConfirmDialog { get; set; } = new();

    AuthenticationState? AuthenticationState;

    string? ErrorMessage;





    protected override async Task OnInitializedAsync()
    {
        AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    async Task Attend()
    {
        if (AuthenticationState is not null && AuthenticationState?.User.Identity?.IsAuthenticated == false)
        {
            Dialog?.Show();
        }
        else
        {
            // await App!.ShowToast("You are already logged in.", "error");
            // await App!.ShowConfirmation("You are already logged in.", "error");

            ConfirmDialog?.Show("Are You sure you want to RSVP for this event?", async () =>
            {
                var email = AuthenticationState?.User.FindFirst(x => x.Type == ClaimTypes.Email)?.Value;

                var result = await RsvpRepository.AddAsync(email, Event!.Id);
                if (result.Success) Navigation.NavigateTo($"/event/{Event.Id}");
                else 
                {
                    ErrorMessage = result.Message;
                    StateHasChanged();
                }
                await App!.ShowToast(result.Message, result.Success ? "success" : "error");
            });
        }
    }


}