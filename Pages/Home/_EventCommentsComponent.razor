@inject ICommentRepository CommentRepository

<h5 class="mt-5 text-center text-white">@Title</h5>

@if (!IsProcessing || Entities is not null)
{
    <div class="mt-5 container">
        @foreach (var item in Entities)
        {

            // TODO - IMPORTANT - Adding @key="item.Id" Blazor only Add not refresh All List
            <div class="card mb-3" @key="item.Id">

                <div class="card-body">
                    <p class="card-title text-white">
                        @item.UserName
                        <span class="ms-2 badge text-bg-light">
                            @(item.UserId == Event?.OrganizerId ? "Organizer" : string.Empty)
                        </span>
                    </p>
                    <h7 class="position-absolute top-0 end-0">@item.CreatedUtc.ToString("g")</h7>
                    <p class="card-text">@item.Message</p>
                </div>
            </div>
        }
    </div>
}

@if (!App!.CurrentUser.IsAuthenticated)
{
    <div class="alert alert-warning" role="alert">
        Please <a href="/login">log in</a> to leave a comment.
    </div>
}
else
{
    <div class="mt-5">
        <div>
            <label class="text-white">Leave a Comment</label>
            <InputTextArea @bind-Value="Input.Message" class="form-control" placeholder="Write your comment here..." rows="3" required />
        </div>
        <div class="text-end">
            <button class="btn btn-primary" @onclick="HandleSubmit">Submit</button>
        </div>
    </div>
}


@code {
    [CascadingParameter] AppState? App { get; set; }

    [Parameter] public EventDto? Event { get; set; }

    List<CommentDto>? Entities { get; set; } = new();

    CommentInput Input = new();

    const string Title = "Event Comments";

    bool IsProcessing { get; set; } = true;

    

    protected override async Task OnParametersSetAsync() => await LoadData();
    
    async Task LoadData()
    {
        var result = await CommentRepository.GetCommentsByEventIdAsync(Event!.Id);
        if (!result.Success || result.Data is null) return;

        Entities = result.Data;
        IsProcessing = false;
        StateHasChanged();
    }


    async Task HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(Input);

        if (string.IsNullOrWhiteSpace(Input.Message))
        {
            App?.ShowToast("Comment cannot be empty.", "error");
            return;
        }
        var newComment = new CommentInput
        {
            EventId = Event!.Id,
            UserId = App.CurrentUser.Id,
            UserName = App.CurrentUser.Name,
            Message = Input.Message
        };

        await CommentRepository.AddAsync(newComment);
        Input.Message = string.Empty;
        await LoadData();

        //Navigation.Refresh();
        // Navigation.Refresh(true);
        // var result = await CommentRepository.AddAsync(newComment);
        // await App!.ShowToast(result.Message, result.Success ? "success" : "error");
        // StateHasChanged();
    }
}